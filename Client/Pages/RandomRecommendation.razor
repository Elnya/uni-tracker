@page "/random-recommendation"

<PageTitle>츄니즘 랜덤 곡 추첨</PageTitle>

<h1>츄니즘 랜덤 곡 추첨</h1>

<div>
    <fluent-radio-group @bind="versionFlag">
        구분 : 
        @foreach(var ver in Enum.GetValues(typeof(Version)))
        {
            <fluent-radio Value=@ver /><text>&nbsp;</text> @ver <text>&nbsp;</text> <text>&nbsp;</text>
        }
    </fluent-radio-group>
</div>

<div>
    <label for="min-level">최소 레벨</label>
    <fluent-select class="custom-select" @bind="indexOfSelectedMinLevel">
    @foreach (string level in levels)
    {
        <fluent-option value="@levels.IndexOf(level)">@level</fluent-option>
    }
    </fluent-select>
    &nbsp; &nbsp; &nbsp; &nbsp; 
    <label for="max-level">최대 레벨</label>
    <fluent-select class="custom-select" @bind="indexOfSelectedMaxLevel">
    @foreach (string level in levels)
    {
        <fluent-option value="@levels.IndexOf(level)">@level</fluent-option>
    }
    </fluent-select>
</div>

<div>
    <label for="number-of-recommended-songs">추첨 곡 수
    <fluent-select class="custom-select" @bind="numberOfResults">
        <fluent-option value="1">1</fluent-option>
        <fluent-option value="2">2</fluent-option>
        <fluent-option value="3">3</fluent-option>
        <fluent-option value="4">4</fluent-option>
    </fluent-select>
    </label>
</div>

<br/>

<p hidden="@hideErrorMessage" style="font:bold;color:red">@errorMessage</p>
<br />
<button class="btn btn-primary" @onclick="onClickGetRandomNumber">추첨!</button>

<FluentDataGrid RowsData="@queryableResults">
    <TemplateColumn Title="레벨" SortBy="@levelSort" Sortable="true">
        <strong>@(context.level)</strong>
    </TemplateColumn>
    <TemplateColumn Title="위치">
        <strong>@(context.position)</strong>
    </TemplateColumn>
    @*<PropertyColumn Title="위치" Property="@(r => r.position)" style="font-weight: bold;" />*@
    <PropertyColumn Title="전체 곡 수" Property="@(r => r.numberOfTracks)" />
    @*
    <PropertyColumn Title="접근 위치" Property="@(r => r.approachPoint)" />
    *@
    <TemplateColumn Title="접근 위치">
        @if (context.approachPoint == "오른쪽")
        {
            <FluentBadge Appearance="Appearance.Accent">
                @(context.approachPoint)
            </FluentBadge>
        }
        else
        {
            <FluentBadge Appearance="Appearance.Neutral">
                @(context.approachPoint)
            </FluentBadge>
        }
    </TemplateColumn>
</FluentDataGrid>



@code {
    private enum Version { International = 1, Japanese = 2 };
    
    private Version versionFlag = Version.International;

    private int indexOfSelectedMinLevel = 0;
    private int indexOfSelectedMaxLevel = 22;
    private int numberOfResults = 1;

    private record Result 
    (
        string level, 
        int position, 
        int numberOfTracks, 
        string approachPoint
    );

    private List<Result> results = new List<Result>();
    IQueryable<Result>? queryableResults;
    GridSort<Result> levelSort = GridSort<Result>
        .ByAscending(r => Convert.ToInt32(r.level.Trim('+')))
        .ThenAscending(r => r.level.Length);
    
    /* for an error message */
    private string errorMessage = string.Empty;
    private bool hideDiv { get; set; } = true;
    private bool hideErrorMessage { get; set; } = true;

    private int test;
    Dictionary<string, int> internationalTrackinfo = new Dictionary<string, int>();
    Dictionary<string, int> japaneseTrackinfo = new Dictionary<string, int>();
    List<string> levels = new List<string>();

    protected override void OnInitialized()
    {
        internationalTrackinfo.Add("1", 16);
        internationalTrackinfo.Add("2", 189);
        internationalTrackinfo.Add("3", 621);
        internationalTrackinfo.Add("4", 236);
        internationalTrackinfo.Add("5", 348);
        internationalTrackinfo.Add("6", 387);
        internationalTrackinfo.Add("7", 141);
        internationalTrackinfo.Add("7+", 54);
        internationalTrackinfo.Add("8", 160);
        internationalTrackinfo.Add("8+", 86);
        internationalTrackinfo.Add("9", 181);
        internationalTrackinfo.Add("9+", 253);
        internationalTrackinfo.Add("10", 149);
        internationalTrackinfo.Add("10+", 100);
        internationalTrackinfo.Add("11", 98);
        internationalTrackinfo.Add("11+", 138);
        internationalTrackinfo.Add("12", 137);
        internationalTrackinfo.Add("12+", 189);
        internationalTrackinfo.Add("13", 173);
        internationalTrackinfo.Add("13+", 223);
        internationalTrackinfo.Add("14", 207);
        internationalTrackinfo.Add("14+", 176);
        internationalTrackinfo.Add("15", 32);

        japaneseTrackinfo.Add("1", 17);
        japaneseTrackinfo.Add("2", 230);
        japaneseTrackinfo.Add("3", 711);
        japaneseTrackinfo.Add("4", 244);
        japaneseTrackinfo.Add("5", 426);
        japaneseTrackinfo.Add("6", 438);
        japaneseTrackinfo.Add("7", 152);
        japaneseTrackinfo.Add("7+", 57);
        japaneseTrackinfo.Add("8", 185);
        japaneseTrackinfo.Add("8+", 103);
        japaneseTrackinfo.Add("9", 216);
        japaneseTrackinfo.Add("9+", 289);
        japaneseTrackinfo.Add("10", 164);
        japaneseTrackinfo.Add("10+", 108);
        japaneseTrackinfo.Add("11", 112);
        japaneseTrackinfo.Add("11+", 164);
        japaneseTrackinfo.Add("12", 166);
        japaneseTrackinfo.Add("12+", 219);
        japaneseTrackinfo.Add("13", 190);
        japaneseTrackinfo.Add("13+", 243);
        japaneseTrackinfo.Add("14", 220);
        japaneseTrackinfo.Add("14+", 182);
        japaneseTrackinfo.Add("15", 32);

        levels = internationalTrackinfo.Keys.ToList();
    }

    private void onClickGetRandomNumber()
    {
        if (versionFlag == Version.International)
        {
            getRandomNumber(internationalTrackinfo);
        }
        else if (versionFlag == Version.Japanese)
        {
            getRandomNumber(japaneseTrackinfo);
        }
        else 
        {
            setErrorMessage("국제판/일본판 구분이 선택되지 않았습니다.");
        }
    }

    private void getRandomNumber(Dictionary<String, int> trackInfo)
    {
        if (indexOfSelectedMinLevel > indexOfSelectedMaxLevel)
        {
            setErrorMessage("최소 레벨이 최대 레벨보다 높습니다.");
        }
        else if (numberOfResults < 1)
        {
            setErrorMessage("추첨할 곡 수가 1보다 작습니다.");
        }
        else
        {
            hideDiv = false;
            hideErrorMessage = true;
            Random random = new Random();
            results = new List<Result>();
            for (int i = 0; i < numberOfResults; i++) 
            {
                // Random.Next do not include maxValue
                int indexOfselectedLevel = 
                    random.Next(indexOfSelectedMinLevel, indexOfSelectedMaxLevel + 1);
                string level = trackInfo.ElementAt(indexOfselectedLevel).Key;
                int numberOfTracks = trackInfo[level];
                int position = random.Next(1, numberOfTracks + 1);
                string approachPoint = numberOfTracks / 2 > position ? "왼쪽" : "오른쪽";
                results.Add(new Result(level, position, numberOfTracks, approachPoint));
            }
            queryableResults = results.AsQueryable();
        }
    }

    private void setErrorMessage(string errorMsg)
    {
        errorMessage = errorMsg;
        hideDiv = true;
        hideErrorMessage = false;
    }
}
