@page "/random-recommendation"
@using Microsoft.Fast.Components.FluentUI

<PageTitle>츄니즘 랜덤 곡 추첨</PageTitle>

<h1>츄니즘 랜덤 곡 추첨</h1>

<div>
    <fluent-radio-group @bind="versionFlag">
        구분 : 
        @foreach(var ver in Enum.GetValues(typeof(Version)))
        {
            <fluent-radio Value=@ver /><text>&nbsp;</text> @ver <text>&nbsp;</text> <text>&nbsp;</text>
        }
    </fluent-radio-group>
</div>

<div>
<label for="min-difficulty">최소 레벨
<fluent-select class="custom-select" @bind="indexOfSelectedMinDifficulty">
    @foreach (string difficulty in difficulties)
    {
        <fluent-option value="@difficulties.IndexOf(difficulty)">@difficulty</fluent-option>
    }
</fluent-select>
</label>
&nbsp; &nbsp; &nbsp; &nbsp; 
<label for="max-difficulty">최대 레벨
<fluent-select class="custom-select" @bind="indexOfSelectedMaxDifficulty">
    @foreach (string difficulty in difficulties)
    {
        <fluent-option value="@difficulties.IndexOf(difficulty)">@difficulty</fluent-option>
    }
</fluent-select>
</label>
</div>

<!--
<h4>슬라이더 테스트</h4>
<FluentSlider Min="0" Max="220" Step="10" @bind-Value=test>
    <FluentSliderLabel Position="0">1</FluentSliderLabel>
    <FluentSliderLabel Position="10">2</FluentSliderLabel>
    <FluentSliderLabel Position="20">3</FluentSliderLabel>
    <FluentSliderLabel Position="30">4</FluentSliderLabel>
    <FluentSliderLabel Position="40">5</FluentSliderLabel>
    <FluentSliderLabel Position="50">6</FluentSliderLabel>
    <FluentSliderLabel Position="60">7</FluentSliderLabel>
    <FluentSliderLabel Position="70">7+</FluentSliderLabel>
    <FluentSliderLabel Position="80">8</FluentSliderLabel>
    <FluentSliderLabel Position="90">8+</FluentSliderLabel>
    <FluentSliderLabel Position="100">9</FluentSliderLabel>
    <FluentSliderLabel Position="110">9+</FluentSliderLabel>
    <FluentSliderLabel Position="120">10</FluentSliderLabel>
    <FluentSliderLabel Position="130">10+</FluentSliderLabel>
    <FluentSliderLabel Position="140">11</FluentSliderLabel>
    <FluentSliderLabel Position="150">11+</FluentSliderLabel>
    <FluentSliderLabel Position="160">12</FluentSliderLabel>
    <FluentSliderLabel Position="170">12+</FluentSliderLabel>
    <FluentSliderLabel Position="180">13</FluentSliderLabel>
    <FluentSliderLabel Position="190">13+</FluentSliderLabel>
    <FluentSliderLabel Position="200">14</FluentSliderLabel>
    <FluentSliderLabel Position="210">14+</FluentSliderLabel>
    <FluentSliderLabel Position="220">15</FluentSliderLabel>
    <FluentIcon Name="@FluentIcons.Globe" Slot="thumb" Size="@IconSize.Size16" Color=Color.Neutral />
</FluentSlider>
-->

<br/>
<div hidden="@hideDiv">
<span style="font:x-large bold;color:red">@difficulty</span> 레벨의 <span style="font:x-large bold;color:red">@position</span>/@numberOfTracks 번째 곡
<br />
<span style="font:x-large bold;color:red">@approachPoint</span>에서 접근하면 빨리 찾을 수 있어요!
</div>
<p hidden="@hideErrorMsg" style="font:bold;color:red">@errorMsg</p>
<br />
<button class="btn btn-primary" @onclick="onClickGetRandomNumber">추첨!</button>

@code {
    private enum Version { International = 1, Japanese = 2 };
    
    private Version versionFlag = Version.International;

    private int indexOfSelectedMinDifficulty = 0;
    private int indexOfSelectedMaxDifficulty = 0;
    private string status = string.Empty;
    private string difficulty = string.Empty;
    private string approachPoint = string.Empty;
    private int position = 0;
    private int numberOfTracks = 0;
    private string errorMsg = string.Empty;

    private bool hideDiv { get; set; } = true;
    private bool hideErrorMsg { get; set; } = true;

    private int test;
    Dictionary<string, int> internationalTrackinfo = new Dictionary<string, int>();
    Dictionary<string, int> japaneseTrackinfo = new Dictionary<string, int>();
    List<string> difficulties = new List<string>();

    protected override void OnInitialized()
    {
        internationalTrackinfo.Add("1", 16);
        internationalTrackinfo.Add("2", 184);
        internationalTrackinfo.Add("3", 604);
        internationalTrackinfo.Add("4", 233);
        internationalTrackinfo.Add("5", 342);
        internationalTrackinfo.Add("6", 379);
        internationalTrackinfo.Add("7", 139);
        internationalTrackinfo.Add("7+", 51);
        internationalTrackinfo.Add("8", 159);
        internationalTrackinfo.Add("8+", 83);
        internationalTrackinfo.Add("9", 173);
        internationalTrackinfo.Add("9+", 248);
        internationalTrackinfo.Add("10", 145);
        internationalTrackinfo.Add("10+", 97);
        internationalTrackinfo.Add("11", 96);
        internationalTrackinfo.Add("11+", 137);
        internationalTrackinfo.Add("12", 137);
        internationalTrackinfo.Add("12+", 182);
        internationalTrackinfo.Add("13", 164);
        internationalTrackinfo.Add("13+", 216);
        internationalTrackinfo.Add("14", 206);
        internationalTrackinfo.Add("14+", 169);
        internationalTrackinfo.Add("15", 31);

        japaneseTrackinfo.Add("1", 17);
        japaneseTrackinfo.Add("2", 229);
        japaneseTrackinfo.Add("3", 707);
        japaneseTrackinfo.Add("4", 243);
        japaneseTrackinfo.Add("5", 424);
        japaneseTrackinfo.Add("6", 438);
        japaneseTrackinfo.Add("7", 151);
        japaneseTrackinfo.Add("7+", 56);
        japaneseTrackinfo.Add("8", 184);
        japaneseTrackinfo.Add("8+", 103);
        japaneseTrackinfo.Add("9", 215);
        japaneseTrackinfo.Add("9+", 288);
        japaneseTrackinfo.Add("10", 163);
        japaneseTrackinfo.Add("10+", 107);
        japaneseTrackinfo.Add("11", 112);
        japaneseTrackinfo.Add("11+", 163);
        japaneseTrackinfo.Add("12", 163);
        japaneseTrackinfo.Add("12+", 219);
        japaneseTrackinfo.Add("13", 190);
        japaneseTrackinfo.Add("13+", 241);
        japaneseTrackinfo.Add("14", 218);
        japaneseTrackinfo.Add("14+", 181);
        japaneseTrackinfo.Add("15", 32);

        difficulties = internationalTrackinfo.Keys.ToList();
    }

    private void onClickGetRandomNumber()
    {
        if (versionFlag == Version.International)
        {
            getRandomNumber(internationalTrackinfo);
        }
        else if (versionFlag == Version.Japanese)
        {
            getRandomNumber(japaneseTrackinfo);
        }
        else 
        {
            errorMsg = "국제판/일본판 구분이 선택되지 않았습니다.";
            hideDiv = true;
            hideErrorMsg = false;
        }
    }

    private void getRandomNumber(Dictionary<String, int> trackInfo)
    {
        if (indexOfSelectedMinDifficulty > indexOfSelectedMaxDifficulty)
        {
            errorMsg = "최소 레벨이 최대 레벨보다 높습니다.";
            hideDiv = true;
            hideErrorMsg = false;
        }
        else
        {
            hideDiv = false;
            hideErrorMsg = true;
            Random random = new Random();

            // Random.Next do not include maxValue
            int indexOfselectedDifficulty = 
                random.Next(indexOfSelectedMinDifficulty, indexOfSelectedMaxDifficulty + 1);
            difficulty = trackInfo.ElementAt(indexOfselectedDifficulty).Key;
            numberOfTracks = trackInfo[difficulty];
            position = random.Next(1, numberOfTracks + 1);
            if (numberOfTracks / 2 > position)
            {
                approachPoint = "왼쪽";
            }
            else
            {
                approachPoint = "오른쪽";
            }
        }
    }
}
